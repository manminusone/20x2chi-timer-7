
worker_processes 4;
error_log logs/error.log;
events {
	worker_connections 1024;
}

# http server setup for timer API

http {
	server {
		listen 80;
		location / {
			default_type text/html;
			content_by_lua_block {
				ngx.say('<h1>Hello, explorer</h1>')
			}
		}

		# The /time URIs will implement the clock API. The Python script running on the desktop
		# will hit this API locally for info.
		location = /time {
			default_type text/plain;
			content_by_lua_block {
				local redis = require "resty.redis"
				local rds = redis:new()
				local cjson = require "cjson"

				local ok, err = rds:connect("127.0.0.1",6379)
				if not ok then
					ngx.say("redis not connecting: ", err)
					return
				end

				respval = {secs=0, status=''}
				res1, err1 = rds:get("timevalue")
				res2, err2 = rds:get("timestatus")

				-- assume the timer is in an invalid state if status is not ON or OFF
				if res2 ~= 'ON' and res2 ~= 'OFF' then
					respval.secs = os.time()
					respval.status = 'OFF'

					-- set some values to correct the invalid state
					rds:set("timevalue",os.time())
					rds:set("timestatus", "OFF")
				end
				if res2 == 'ON' then
					respval.secs = 120 - (os.time() - res1)
					respval.status = 'ON'
				elseif res2 == 'OFF' then
					respval.secs = 120
					respval.status = 'OFF'
				end

				ngx.say(cjson.encode(respval))
				return
			}
		}
		location = /time/start {
			default_type text/plain;
			content_by_lua_block {
				local redis = require "resty.redis"
				local rds = redis:new()
				local cjson = require "cjson"

				local ok, err = rds:connect("127.0.0.1",6379)
				if not ok then
					ngx.say("redis not connecting: ", err)
					return
				end
				res1, err1 = rds:get("timevalue")
				res2, err2 = rds:get("timestatus")
				-- skip the timer start if it is already on
				if res2 ~= 'ON' then
					rds:set("timevalue",os.time())
					rds:set("timestatus", "ON")
				end
				ngx.say(cjson.encode({status="OK"}))
				return
			}
		}
		location = /time/stop {
			default_type text/plain;
			content_by_lua_block {
				local redis = require "resty.redis"
				local rds = redis:new()
				local cjson = require "cjson"

				local ok, err = rds:connect("127.0.0.1",6379)
				if not ok then
					ngx.say("redis not connecting: ", err)
					return
				end
				res1, err1 = rds:get("timevalue")
				res2, err2 = rds:get("timestatus")
				if res2 ~= 'OFF' then
					rds:set("timestatus", "OFF")
				end
				ngx.say(cjson.encode({status="OK"}))
				return
			}
		}
	}
}

